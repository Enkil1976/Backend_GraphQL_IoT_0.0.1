
services:
  # Inicialización de la base de datos
  db-init:
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # Configuración de PostgreSQL
      - PG_HOST=postgres
      - PG_PORT=${PG_PORT:-5432}
      - PG_DATABASE=${PG_DATABASE:-invernadero_iot}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASSWORD=${PG_PASSWORD:-secure_db_password_change_me}
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: ["init-db"]
    networks:
      - iot-network
    restart: "no"

  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "${PORT:-4001}:${PORT:-4001}"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-4001}
      # Configuración de PostgreSQL
      - PG_HOST=postgres
      - PG_PORT=${PG_PORT:-5432}
      - PG_DATABASE=${PG_DATABASE:-invernadero_iot}
      - PG_USER=${PG_USER:-postgres}
      - PG_PASSWORD=${PG_PASSWORD:-secure_db_password_change_me}
      # Configuración de Redis
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT:-6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redis_password}
      # Configuración de MQTT (usando broker externo por defecto)
      - MQTT_BROKER_URL=${MQTT_BROKER_URL:-mqtt://broker.emqx.io}
      - MQTT_USERNAME=${MQTT_USERNAME:-}
      - MQTT_PASSWORD=${MQTT_PASSWORD:-}
      # Seguridad
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_super_secure_minimum_32_characters_long}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET:-your_access_token_secret_different_from_jwt}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET:-your_refresh_token_secret_unique_value}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    command: ["start"]
    networks:
      - iot-network
    restart: always
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: iot-postgres
    environment:
      - POSTGRES_DB=${PG_DATABASE:-invernadero_iot}
      - POSTGRES_USER=${PG_USER:-postgres}
      - POSTGRES_PASSWORD=${PG_PASSWORD:-secure_db_password_change_me}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d invernadero_iot"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis para Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    command: ["sh", "-c", "redis-server --requirepass ${REDIS_PASSWORD:-redis_password} --appendonly yes"]
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_password}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # Database management via secure CLI tools only
  # pgAdmin removed for security - use psql or db-cli service for admin tasks

volumes:
  postgres_data:
  redis_data:
  node_modules:

networks:
  iot-network:
    driver: bridge

services:
  # Inicialización de la base de datos
  db-init:
    build:
      context: .
      dockerfile: Dockerfile.fixed
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      # Configuración de PostgreSQL - usar hostname del servicio
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=invernadero_iot
      - PG_USER=iot_user
      - PG_PASSWORD=postgres_password
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/usr/src/app/src:ro
      - ./package.json:/usr/src/app/package.json:ro
      - ./package-lock.json:/usr/src/app/package-lock.json:ro
      - ./init-database.js:/usr/src/app/init-database.js:ro
      - ./sql:/usr/src/app/sql:ro
      - ./migrations:/usr/src/app/migrations:ro
      - ./apply-comprehensive-migration.js:/usr/src/app/apply-comprehensive-migration.js:ro
    command: ["init-db"]
    networks:
      - iot-network
    restart: "no"

  # Aplicación principal
  app:
    build:
      context: .
      dockerfile: Dockerfile.fixed
    ports:
      - "${PORT:-4001}:${PORT:-4001}"
    env_file:
      - .env
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - PORT=${PORT:-4001}
      # Configuración de PostgreSQL - usar hostname del servicio
      - PG_HOST=postgres
      - PG_PORT=5432
      - PG_DATABASE=invernadero_iot
      - PG_USER=iot_user
      - PG_PASSWORD=postgres_password
      # Configuración de Redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=redis_password
      # Configuración de MQTT (usando broker externo)
      - MQTT_HOST=sdb201a6.ala.us-east-1.emqxsl.com
      - MQTT_PORT=8883
      - MQTT_USE_SSL=true
      - MQTT_USERNAME=Backend
      - MQTT_PASSWORD=MqttSecurePass2024
      # Seguridad
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_super_secure_minimum_32_characters_long}
      - ACCESS_TOKEN_SECRET=${ACCESS_TOKEN_SECRET:-your_access_token_secret_different_from_jwt}
      - REFRESH_TOKEN_SECRET=${REFRESH_TOKEN_SECRET:-your_refresh_token_secret_unique_value}
      - BCRYPT_ROUNDS=${BCRYPT_ROUNDS:-12}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      db-init:
        condition: service_completed_successfully
    volumes:
      - ./src:/usr/src/app/src:ro
      - ./package.json:/usr/src/app/package.json:ro
      - ./package-lock.json:/usr/src/app/package-lock.json:ro
      - ./init-database.js:/usr/src/app/init-database.js:ro
      - ./sql:/usr/src/app/sql:ro
      - ./migrations:/usr/src/app/migrations:ro
      - ./apply-comprehensive-migration.js:/usr/src/app/apply-comprehensive-migration.js:ro
    command: ["start"]
    networks:
      - iot-network
    restart: always
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Base de datos PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: iot-postgres
    environment:
      - POSTGRES_DB=invernadero_iot
      - POSTGRES_USER=iot_user
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${PG_PORT:-5432}:5432"
    networks:
      - iot-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iot_user -d invernadero_iot"]
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 30s
    restart: always

  # Redis para Pub/Sub
  redis:
    image: redis:7-alpine
    container_name: iot-redis
    command: redis-server --requirepass redis_password --appendonly yes --bind 0.0.0.0
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - iot-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 20s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: always

  # Database management via secure CLI tools only
  # pgAdmin removed for security - use psql or db-cli service for admin tasks

volumes:
  postgres_data:
  redis_data:

networks:
  iot-network:
    driver: bridge
# Sensor Type Definitions

extend type Query {
  # Sensor Queries
  sensors(types: [SensorType!], online: Boolean): [Sensor!]!
  sensor(id: ID!): Sensor
  sensorReadings(
    sensorId: ID!
    limit: Int = 100
    offset: Int = 0
    from: DateTime
    to: DateTime
  ): SensorReadingConnection!
  latestSensorData(types: [SensorType!]): [SensorReading!]!
  sensorStats(sensorId: ID!, timeRange: TimeRange!): SensorStatistics!
  
  # Dynamic Sensor Management
  sensorTypes: [SensorTypeDefinition!]!
  sensorType(typeId: String!): SensorTypeDefinition
  sensorPayloadTemplate(typeId: String!): JSON!
  sensorSamplePayload(typeId: String!): JSON!
  sensorAlerts(sensorId: ID): [SensorAlert!]!
  
  # Auto-Discovery
  autoDiscoveryStatus: AutoDiscoveryStatus!
  unknownTopics: [UnknownTopic!]!
  
  # Historical Data - All Sensors and Devices
  allSensorHistory(
    limit: Int = 100
    offset: Int = 0
    from: DateTime
    to: DateTime
    types: [SensorType!]
  ): SensorHistoryConnection!
  
  # Specific table data queries
  tempPressureData(
    sensorId: String
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [TempPressureReading!]!
  
  waterQualityData(
    sensorId: String
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [WaterQualityReading!]!
  
  lightData(
    sensorId: String
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [LightReading!]!
  
  # Legacy sensor data tables (where real data exists)
  legacyTemHum1Data(
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [LegacyTemHumReading!]!
  
  legacyTemHum2Data(
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [LegacyTemHumReading!]!
  
  legacyWaterQualityData(
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [LegacyWaterQualityReading!]!
  
  legacyLightData(
    limit: Int = 100
    from: DateTime
    to: DateTime
  ): [LegacyLightReading!]!
  
}

extend type Subscription {
  # Real-time sensor data
  sensorDataUpdated(sensorTypes: [SensorType!]): SensorReading!
  sensorStatusChanged: Sensor!
  
  # Dynamic sensor subscriptions
  sensorCreated: Sensor!
  sensorDeleted: DeletedSensor!
  sensorAlertTriggered: SensorAlert!
}

# Sensor Types
type Sensor {
  id: ID!
  hardwareId: String!
  name: String!
  type: SensorType!
  location: String
  description: String
  isOnline: Boolean!
  lastSeen: DateTime
  mqttTopic: String
  
  # Latest reading
  latestReading: SensorReading
  
  # Historical data
  readings(limit: Int = 100, from: DateTime, to: DateTime): [SensorReading!]!
  
  # Statistics
  stats(timeRange: TimeRange): SensorStatistics
  
  # Metadata
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SensorReading {
  id: ID!
  sensor: Sensor!
  timestamp: DateTime!
  
  # Environmental Data
  temperatura: Float
  humedad: Float
  heatIndex: Float
  dewPoint: Float
  
  # Pressure Data (BMP280 sensor)
  presion: Float # Atmospheric pressure in Pascals
  altitude: Float # Calculated altitude in meters
  
  # Water Quality Data  
  ph: Float
  ec: Float # Electrical Conductivity
  ppm: Float # Parts Per Million
  temperaturaAgua: Float
  
  # Light Data
  light: Float
  whiteLight: Float
  rawLight: Float
  
  # Power Data
  watts: Float
  voltage: Float
  current: Float
  frequency: Float
  powerFactor: Float
  
  # Signal Quality
  rssi: Int
  signalQuality: Float
  
  # System Data
  batteryLevel: Float
  memoryUsage: Int
  bootCount: Int
  errorCount: Int
  
  # Raw data for extensibility
  rawData: JSON
}

type SensorReadingConnection {
  edges: [SensorReadingEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
}

type SensorReadingEdge {
  cursor: String!
  node: SensorReading!
}

type SensorStatistics {
  sensor: Sensor!
  timeRange: TimeRangeOutput!
  
  # Temperature stats
  temperaturaStats: FieldStats
  humedadStats: FieldStats
  
  # Pressure stats
  presionStats: FieldStats
  altitudeStats: FieldStats
  
  # Water Quality stats
  phStats: FieldStats
  ecStats: FieldStats
  ppmStats: FieldStats
  
  # Light stats
  lightStats: FieldStats
  whiteLightStats: FieldStats
  rawLightStats: FieldStats
  
  # Power stats
  wattsStats: FieldStats
  voltageStats: FieldStats
  currentStats: FieldStats
  
  # Data quality
  totalReadings: Int!
  validReadings: Int!
  errorReadings: Int!
  dataQualityPercent: Float!
  
  # Uptime
  uptimePercent: Float!
  lastOnlineTime: DateTime
  averageInterval: Float # seconds between readings
}

type FieldStats {
  min: Float!
  max: Float!
  avg: Float!
  median: Float
  stdDev: Float
  count: Int!
  trend: TrendDirection
}

enum SensorType {
  TEMHUM1
  TEMHUM2
  CALIDAD_AGUA
  LUXOMETRO
  POWER_MONITOR
  WEATHER_STATION
  SOIL_MOISTURE
  LIGHT_SENSOR
  CO2_SENSOR
  
  # Dynamic sensor types
  TEMHUM
  TEMP_PRESSURE
  WATER_QUALITY
  LIGHT
  CO2
  MOTION
  CUSTOM
  SYSTEM
}

enum TrendDirection {
  UP
  DOWN
  STABLE
  VOLATILE
}

# Dynamic Sensor Management Types

extend type Mutation {
  # Create/Update/Delete Sensors
  createSensor(input: CreateSensorInput!): Sensor!
  updateSensor(id: ID!, input: UpdateSensorInput!): Sensor!
  deleteSensor(id: ID!): DeletedSensor!
  
  # Sensor configuration
  configureSensorMQTT(input: ConfigureSensorMQTTInput!): Sensor!
  configureSensorAlerts(sensorId: ID!, alerts: [SensorAlertInput!]!): [SensorAlert!]!
  testSensorPayload(sensorId: ID!, payload: JSON!): ValidationResult!
  
  # Sensor types management
  createSensorType(input: CreateSensorTypeInput!): SensorTypeDefinition!
  updateSensorType(typeId: String!, input: UpdateSensorTypeInput!): SensorTypeDefinition!
  deleteSensorType(typeId: String!): DeletedSensorType!
}

input CreateSensorInput {
  sensorId: String!
  name: String!
  type: String!
  description: String
  location: String
  
  # MQTT Configuration
  mqttTopic: String
  hardwareId: String
  
  # Database Configuration
  tableName: String
  
  # Payload and validation
  payloadTemplate: JSON
  validationRules: JSON
  
  # Configuration
  samplingInterval: Int
  retentionDays: Int
  alertThresholds: JSON
  
  # Custom fields for CUSTOM sensor type
  customFields: JSON
}

input UpdateSensorInput {
  name: String
  description: String
  location: String
  
  # Configuration updates
  isActive: Boolean
  samplingInterval: Int
  retentionDays: Int
  alertThresholds: JSON
  
  # Custom fields updates
  customFields: JSON
}

input ConfigureSensorMQTTInput {
  sensorId: ID!
  mqttTopic: String!
  payloadFormat: JSON!
  samplePayload: JSON
  
  # Optional configuration
  cacheKey: String
  metricsFields: [String!]
  dataAgeMinutes: Int
  updateFrequency: Int
}

input CreateSensorTypeInput {
  typeId: String!
  name: String!
  description: String
  
  # Templates
  mqttTopicTemplate: String!
  payloadTemplate: JSON!
  
  # Database configuration
  defaultTableName: String!
  cacheKeyTemplate: String!
  
  # Fields configuration
  availableFields: [String!]!
  metricsFields: [String!]!
  
  # Special handling
  specialHandling: JSON
  isCustomizable: Boolean
}

input UpdateSensorTypeInput {
  name: String
  description: String
  payloadTemplate: JSON
  availableFields: [String!]
  metricsFields: [String!]
  specialHandling: JSON
  isActive: Boolean
  isCustomizable: Boolean
}

input SensorAlertInput {
  alertName: String!
  fieldName: String!
  conditionType: AlertConditionType!
  thresholdValue: Float
  thresholdMin: Float
  thresholdMax: Float
  notificationChannels: [String!]
  cooldownMinutes: Int
  isActive: Boolean
}

type SensorTypeDefinition {
  id: ID!
  typeId: String!
  name: String!
  description: String
  
  # Templates
  mqttTopicTemplate: String!
  payloadTemplate: JSON!
  
  # Database configuration
  defaultTableName: String!
  cacheKeyTemplate: String!
  
  # Fields configuration
  availableFields: [String!]!
  metricsFields: [String!]!
  
  # Special handling
  specialHandling: JSON
  isActive: Boolean!
  isCustomizable: Boolean!
  
  # Metadata
  createdAt: DateTime!
  updatedAt: DateTime!
  
  # Associated sensors
  sensors: [Sensor!]!
}

type SensorAlert {
  id: ID!
  sensor: Sensor!
  alertName: String!
  fieldName: String!
  conditionType: AlertConditionType!
  
  # Thresholds
  thresholdValue: Float
  thresholdMin: Float
  thresholdMax: Float
  
  # Status
  isActive: Boolean!
  isTriggered: Boolean!
  lastTriggered: DateTime
  triggerCount: Int!
  
  # Notification configuration
  notificationChannels: [String!]!
  cooldownMinutes: Int!
  
  # Metadata
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy: User
}

type DeletedSensor {
  id: ID!
  sensorId: String!
  name: String!
  deletedAt: DateTime!
  deletedBy: User
}

type DeletedSensorType {
  typeId: String!
  name: String!
  deletedAt: DateTime!
  deletedBy: User
}


enum AlertConditionType {
  ABOVE
  BELOW
  EQUALS
  RANGE
  CHANGE_RATE
  MISSING_DATA
}

# Auto-Discovery Types

type AutoDiscoveryStatus {
  enabled: Boolean!
  unknownTopicsCount: Int!
  totalAnalyzed: Int!
  autoCreatedCount: Int!
  recentActivity: [AutoDiscoveryActivity!]!
  config: AutoDiscoveryConfig!
}

type AutoDiscoveryConfig {
  analysisWindow: Int!
  minSamples: Int!
  autoCreateThreshold: Int!
  approvalThreshold: Int!
}

type AutoDiscoveryActivity {
  timestamp: DateTime!
  action: String!
  topic: String!
  entityType: String
  entityId: ID
  confidence: Int
}

type UnknownTopic {
  topic: String!
  firstSeen: DateTime!
  lastSeen: DateTime!
  messageCount: Int!
  payloadSamples: [JSON!]!
  sensorScore: Int!
  deviceScore: Int!
  suggestedType: String!
  confidence: Int!
  status: DiscoveryStatus!
}

enum DiscoveryStatus {
  ANALYZING
  PENDING_APPROVAL
  AUTO_CREATED
  IGNORED
  MANUAL_REVIEW
}

# Historical Data Types for All Sensors

type SensorHistoryConnection {
  edges: [SensorHistoryEdge!]!
  pageInfo: PageInfo!
  totalCount: Int!
  byType: [SensorHistoryByType!]!
}

type SensorHistoryEdge {
  cursor: String!
  node: SensorHistoryReading!
}

type SensorHistoryReading {
  id: ID!
  sensorId: String!
  sensorName: String!
  sensorType: SensorType!
  timestamp: DateTime!
  data: JSON!
  
  # Specific typed data based on sensor type
  tempPressureData: TempPressureReading
  waterQualityData: WaterQualityReading
  lightData: LightReading
  tempHumData: TempHumReading
  powerData: PowerReading
}

type SensorHistoryByType {
  sensorType: SensorType!
  count: Int!
  latestReading: DateTime
  sensors: [String!]!
}

# Specific sensor data types

type TempPressureReading {
  id: ID!
  sensorId: String!
  temperatura: Float!
  presion: Float!
  altitude: Float
  receivedAt: DateTime!
}

type WaterQualityReading {
  id: ID!
  sensorId: String!
  ph: Float!
  ec: Float!
  ppm: Float!
  temperatura: Float
  timestamp: DateTime!
}

type LightReading {
  id: ID!
  sensorId: String!
  light: Float!
  whiteLight: Float
  rawLight: Float
  uvIndex: Float
  timestamp: DateTime!
}

type TempHumReading {
  id: ID!
  sensorId: String!
  temperatura: Float!
  humedad: Float!
  heatIndex: Float
  dewPoint: Float
  timestamp: DateTime!
}

type PowerReading {
  id: ID!
  deviceId: String!
  voltage: Float!
  current: Float!
  watts: Float!
  frequency: Float
  powerFactor: Float
  energyTotal: Float
  timestamp: DateTime!
}

# Legacy data types (where real historical data exists)

type LegacyTemHumReading {
  id: ID!
  temperature: Float!
  humidity: Float!
  timestamp: DateTime!
}

type LegacyWaterQualityReading {
  id: ID!
  ph: Float!
  ec: Float!
  tds: Float!
  temperature: Float
  timestamp: DateTime!
}

type LegacyLightReading {
  id: ID!
  lux: Float!
  timestamp: DateTime!
}

